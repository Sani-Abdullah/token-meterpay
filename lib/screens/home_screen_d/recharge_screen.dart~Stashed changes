// Core
import 'dart:convert';
import 'dart:math';

// External
import 'package:flutter/material.dart';
import 'package:flutter_paystack/flutter_paystack.dart';
import 'package:flutter_form_builder/flutter_form_builder.dart';
import 'package:crypto/crypto.dart';

// Internal
import './../../helpers/auth.dart';
import '../../models/transaction_record.dart';
import '../../models/user.dart' as userM;
import '../../secret.dart' as secret;

class RechargeUnitsScreen extends StatefulWidget {
  RechargeUnitsScreen({Key? key}) : super(key: key);
  static const routeName = 'home:recharge';

  @override
  State<RechargeUnitsScreen> createState() => _RechargeUnitsScreenState();
}

class _RechargeUnitsScreenState extends State<RechargeUnitsScreen> {
  final plugin = PaystackPlugin();
  final GlobalKey<FormBuilderState> _purchaseFormKey =
      GlobalKey<FormBuilderState>();

  final TextEditingController _amountTextController = TextEditingController();

  final Map<String, TextStyle> _rechargeScreenStyle = {
    'toolbar': const TextStyle(
      fontFamily: 'Abel',
      fontSize: 21,
    ),
  };

  final _auth = Auth();

  String referencer() {
    final randomTin = Random();
    var fullRef = sha1
        .convert(utf8.encode(DateTime.now().millisecondsSinceEpoch.toString() +
            (_auth.currentUser()!.uid +
                List.generate(12, (_) => randomTin.nextInt(100)).toString())))
        .toString()
        .toLowerCase();
    var partialRef = '';
    for (var i in List.generate(16, (_) => randomTin.nextInt(fullRef.length))) {
      partialRef += fullRef[i];
    }
    return partialRef;
  }



@override
  void initState() {
    plugin.initialize(publicKey: secret.publicKey_test);
    super.initState();
  }


  // TransactionRecord makeTransactionRecord (String units, ) {
  @override
  Widget build(BuildContext context) {
    var _isLoading = false;
    final Map<String, String> _payData = {};

    
    return Scaffold(
      appBar: AppBar(
        title: Text(
          'Recharge',
          style: _rechargeScreenStyle['toolbar'],
        ),
      ),
      body: SingleChildScrollView(
        physics: const BouncingScrollPhysics(),
        child: Column(
          children: [
            ListTile(
              // Add or remove meter
              onTap: () => {},
            ),
            Container(
              decoration: BoxDecoration(
                border: Border.all(width: 1.0),
              ),
              child: FormBuilder(
                key: _purchaseFormKey,
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: <Widget>[
                    FormBuilderTextField(
                      name: 'Amount',
                      controller: _amountTextController,
                      keyboardType: TextInputType.number,
                      decoration: const InputDecoration(
                        isDense: true,
                        labelText: 'Enter Amount',
                      ),
                      onSubmitted: (_) {},
                      validator: (value) {
                        if (value == null) {
                          return 'Enter amount below 100';
                        } else if (int.parse(value) > 100) {
                          return 'Amout too high';
                        } else {
                          return null;
                        }
                      },
                      onSaved: (value) {},
                    ),
                    ElevatedButton(
                        onPressed: () async {
                          if (_purchaseFormKey.currentState!.validate()) {
                            Charge charge = Charge()
                              ..amount = int.parse('${_amountTextController}00')
                              ..reference =
                                  '${DateTime.now().microsecondsSinceEpoch}'
                              //  ..email = _auth.currentUser()?.email;
                              ..email = 'heatwavemachine@gmail.com';

                            CheckoutResponse response = await plugin.checkout(
                              context,
                              method: CheckoutMethod
                                  .card, // Defaults to CheckoutMethod.selectable
                              charge: charge,
                            );

                            if (!response.status) {}
                          }
                        },
                        child: SizedBox(
                          width: 50,
                          child: Row(
                            children: const [
                              Icon(
                                Icons.payment,
                                size: 25,
                                color: Colors.deepOrangeAccent,
                              ),
                              Text('Pay'),
                            ],
                          ),
                        )),
                  ],
                ),
              ),
            )
          ],
        ),
      ),
    );
  }
}
